import { getBinding } from "./binding";

export type mpz_ptr = number;
export type mpz_srcptr = number;

export type mpfr_ptr = number;
export type mpfr_srcptr = number;

export type mpq_ptr = number;
export type mpq_srcptr = number;

export type mpc_ptr = number;
export type mpc_srcptr = number;

export type mp_bitcnt_t = number;

export type gmp_randstate_t = number;
export type c_unsigned_long_int = number;
export type c_void_ptr = number;
export type c_str_ptr = number;
export type c_int = number;
export type c_int_ptr = number;
export type c_long_ptr = number;
export type c_double = number;
export type c_signed_long_int = number;
export type c_signed_long_int_ptr = number;
export type c_size_t = number;
export type c_size_t_ptr = number;
export type mp_limb_t = number;
export type mp_srcptr = number;
export type mp_size_t = number;
export type mpfr_prec_t = number;
export type mpc_rnd_t = number;
export type mpfr_flags_t = number;
export type mpfr_ptr_ptr = number;
export type mp_ptr = number;
export type mpc_ptr_ptr = number;
export type mpfr_exp_t_ptr = number;
export type c_str_ptr_ptr = number;

export type mpfr_exp_t = number;
export type mpfr_t = number;
export type mpfr_prec_t_ptr = number;

export enum mpfr_rnd_t {
  MPFR_RNDN = 0,  /* round to nearest, with ties to even */
  MPFR_RNDZ = 1,  /* round toward zero */
  MPFR_RNDU = 2,  /* round toward +Inf */
  MPFR_RNDD = 3,  /* round toward -Inf */
  MPFR_RNDA = 4,  /* round away from zero */
  MPFR_RNDF = 5,  /* faithful rounding */
  MPFR_RNDNA = -1, /* round to nearest, with ties away from zero (mpfr_round) */
};

export enum mpfr_flags {
  MPFR_FLAGS_UNDERFLOW = 1,
  MPFR_FLAGS_OVERFLOW = 2,
  MPFR_FLAGS_NAN = 4,
  MPFR_FLAGS_INEXACT = 8,
  MPFR_FLAGS_ERANGE = 16,
  MPFR_FLAGS_DIVBY0 = 32,
  MPFR_FLAGS_ALL = 1 | 2 | 4 | 8 | 16 | 32,
};

export enum mpfr_free_cache_t {
  MPFR_FREE_LOCAL_CACHE  = 1,  /* 1 << 0 */
  MPFR_FREE_GLOBAL_CACHE = 2   /* 1 << 1 */
};

export async function getGMPInterface(wasmPath: string) {
  const gmp = await getBinding(wasmPath);
  console.log(gmp);

  return {
    /**************** Random number routines.  ****************/
    //: void g_randinit_default (p1: gmp_randstate_t) { gmp_randinit_default(p1); }
    //: void g_randinit_lc_2exp (p1: gmp_randstate_t, p2: mpz_srcptr, p3: c_unsigned_long_int, p4: mp_bitcnt_t) { gmp_randinit_lc_2exp(p1, p2, p3, p4); }
    //: c_int g_randinit_lc_2exp_size (p1: gmp_randstate_t, p2: mp_bitcnt_t) { return gmp_randinit_lc_2exp_size(p1, p2); }
    //: void g_randinit_mt (p1: gmp_randstate_t) { gmp_randinit_mt(p1); }
    //: void g_randinit_set (p1: gmp_randstate_t, const __gmp_randstate_struct * p2) { gmp_randinit_set(p1, p2); }
    //: void g_randseed (p1: gmp_randstate_t, p2: mpz_srcptr) { gmp_randseed(p1, p2); }
    //: void g_randseed_ui (p1: gmp_randstate_t, p2: c_unsigned_long_int) { gmp_randseed_ui(p1, p2); }
    //: void g_randclear (p1: gmp_randstate_t) { gmp_randclear(p1); }
    //: unsigned long g_urandomb_ui (p1: gmp_randstate_t, p2: c_unsigned_long_int) { return gmp_urandomb_ui(p1, p2); }
    //: unsigned long g_urandomm_ui (p1: gmp_randstate_t, p2: c_unsigned_long_int) { return gmp_urandomm_ui(p1, p2); }
    
    /**************** Formatted output routines.  ****************/
    
    /**************** Formatted input routines.  ****************/
    
    /**************** Integer (i.e. Z) routines.  ****************/
    
    mpz_t: (): mpz_ptr => { return gmp._z_t(); },
    mpz_t_free: (p1: mpz_ptr): void => { gmp._z_t_free(p1); },
    
    mpz_abs: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_abs(p1, p2); },
    mpz_add: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_add(p1, p2, p3); },
    mpz_add_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_add_ui(p1, p2, p3); },
    mpz_addmul: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_addmul(p1, p2, p3); },
    mpz_addmul_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_addmul_ui(p1, p2, p3); },
    mpz_and: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_and(p1, p2, p3); },
    mpz_array_init: (p1: mpz_ptr, p2: mp_size_t, p3: mp_size_t): void => { gmp._z_array_init(p1, p2, p3); },
    mpz_bin_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_bin_ui(p1, p2, p3); },
    mpz_bin_uiui: (p1: mpz_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int): void => { gmp._z_bin_uiui(p1, p2, p3); },
    mpz_cdiv_q: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_cdiv_q(p1, p2, p3); },
    mpz_cdiv_q_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_cdiv_q_2exp(p1, p2, p3); },
    mpz_cdiv_q_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_cdiv_q_ui(p1, p2, p3); },
    mpz_cdiv_qr: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: mpz_srcptr): void => { gmp._z_cdiv_qr(p1, p2, p3, p4); },
    mpz_cdiv_qr_ui: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_cdiv_qr_ui(p1, p2, p3, p4); },
    mpz_cdiv_r: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_cdiv_r(p1, p2, p3); },
    mpz_cdiv_r_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_cdiv_r_2exp(p1, p2, p3); },
    mpz_cdiv_r_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_cdiv_r_ui(p1, p2, p3); },
    mpz_cdiv_ui: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_cdiv_ui(p1, p2); },
    mpz_clear: (p1: mpz_ptr): void => { gmp._z_clear(p1); },
    mpz_clrbit: (p1: mpz_ptr, p2: mp_bitcnt_t): void => { gmp._z_clrbit(p1, p2); },
    mpz_cmp: (p1: mpz_srcptr, p2: mpz_srcptr): c_int => { return gmp._z_cmp(p1, p2); },
    mpz_cmp_d: (p1: mpz_srcptr, p2: c_double): c_int => { return gmp._z_cmp_d(p1, p2); },
    mpz_cmp_si: (p1: mpz_srcptr, p2: c_signed_long_int): c_int => { return gmp._z_cmp_si(p1, p2); },
    mpz_cmp_ui: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_int => { return gmp._z_cmp_ui(p1, p2); },
    mpz_cmpabs: (p1: mpz_srcptr, p2: mpz_srcptr): c_int => { return gmp._z_cmpabs(p1, p2); },
    mpz_cmpabs_d: (p1: mpz_srcptr, p2: c_double): c_int => { return gmp._z_cmpabs_d(p1, p2); },
    mpz_cmpabs_ui: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_int => { return gmp._z_cmpabs_ui(p1, p2); },
    mpz_com: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_com(p1, p2); },
    mpz_combit: (p1: mpz_ptr, p2: mp_bitcnt_t): void => { gmp._z_combit(p1, p2); },
    mpz_congruent_p: (p1: mpz_srcptr, p2: mpz_srcptr, p3: mpz_srcptr): c_int => { return gmp._z_congruent_p(p1, p2, p3); },
    mpz_congruent_2exp_p: (p1: mpz_srcptr, p2: mpz_srcptr, p3: mp_bitcnt_t): c_int => { return gmp._z_congruent_2exp_p(p1, p2, p3); },
    mpz_congruent_ui_p: (p1: mpz_srcptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int): c_int => { return gmp._z_congruent_ui_p(p1, p2, p3); },
    mpz_divexact: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_divexact(p1, p2, p3); },
    mpz_divexact_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_divexact_ui(p1, p2, p3); },
    mpz_divisible_p: (p1: mpz_srcptr, p2: mpz_srcptr): c_int => { return gmp._z_divisible_p(p1, p2); },
    mpz_divisible_ui_p: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_int => { return gmp._z_divisible_ui_p(p1, p2); },
    mpz_divisible_2exp_p: (p1: mpz_srcptr, p2: mp_bitcnt_t): c_int => { return gmp._z_divisible_2exp_p(p1, p2); },
    mpz_dump: (p1: mpz_srcptr): void => { gmp._z_dump(p1); },
    mpz_export: (p1: c_void_ptr, p2: c_size_t_ptr, p3: c_int, p4: c_size_t, p5: c_int, p6: c_size_t, p7: mpz_srcptr): c_void_ptr => { return gmp._z_export(p1, p2, p3, p4, p5, p6, p7); },
    mpz_fac_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_fac_ui(p1, p2); },
    mpz_2fac_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_2fac_ui(p1, p2); },
    mpz_mfac_uiui: (p1: mpz_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int): void => { gmp._z_mfac_uiui(p1, p2, p3); },
    mpz_primorial_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_primorial_ui(p1, p2); },
    mpz_fdiv_q: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_fdiv_q(p1, p2, p3); },
    mpz_fdiv_q_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_fdiv_q_2exp(p1, p2, p3); },
    mpz_fdiv_q_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_fdiv_q_ui(p1, p2, p3); },
    mpz_fdiv_qr: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: mpz_srcptr): void => { gmp._z_fdiv_qr(p1, p2, p3, p4); },
    mpz_fdiv_qr_ui: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_fdiv_qr_ui(p1, p2, p3, p4); },
    mpz_fdiv_r: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_fdiv_r(p1, p2, p3); },
    mpz_fdiv_r_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_fdiv_r_2exp(p1, p2, p3); },
    mpz_fdiv_r_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_fdiv_r_ui(p1, p2, p3); },
    mpz_fdiv_ui: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_fdiv_ui(p1, p2); },
    mpz_fib_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_fib_ui(p1, p2); },
    mpz_fib2_ui: (p1: mpz_ptr, p2: mpz_ptr, p3: c_unsigned_long_int): void => { gmp._z_fib2_ui(p1, p2, p3); },
    mpz_fits_sint_p: (p1: mpz_srcptr): c_int => { return gmp._z_fits_sint_p(p1); },
    mpz_fits_slong_p: (p1: mpz_srcptr): c_int => { return gmp._z_fits_slong_p(p1); },
    mpz_fits_sshort_p: (p1: mpz_srcptr): c_int => { return gmp._z_fits_sshort_p(p1); },
    mpz_fits_uint_p: (p1: mpz_srcptr): c_int => { return gmp._z_fits_uint_p(p1); },
    mpz_fits_ulong_p: (p1: mpz_srcptr): c_int => { return gmp._z_fits_ulong_p(p1); },
    mpz_fits_ushort_p: (p1: mpz_srcptr): c_int => { return gmp._z_fits_ushort_p(p1); },
    mpz_gcd: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_gcd(p1, p2, p3); },
    mpz_gcd_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_gcd_ui(p1, p2, p3); },
    mpz_gcdext: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_ptr, p4: mpz_srcptr, p5: mpz_srcptr): void => { gmp._z_gcdext(p1, p2, p3, p4, p5); },
    mpz_get_d: (p1: mpz_srcptr): c_double => { return gmp._z_get_d(p1); },
    mpz_get_d_2exp: (p1: c_signed_long_int_ptr, p2: mpz_srcptr): c_double => { return gmp._z_get_d_2exp(p1, p2); },
    mpz_get_si: (p1: mpz_srcptr): c_signed_long_int => { return gmp._z_get_si(p1); },
    mpz_get_str: (p1: c_str_ptr, p2: c_int, p3: mpz_srcptr): c_str_ptr => { return gmp._z_get_str(p1, p2, p3); },
    mpz_get_ui: (p1: mpz_srcptr): c_unsigned_long_int => { return gmp._z_get_ui(p1); },
    mpz_getlimbn: (p1: mpz_srcptr, p2: mp_size_t): mp_limb_t => { return gmp._z_getlimbn(p1, p2); },
    mpz_hamdist: (p1: mpz_srcptr, p2: mpz_srcptr): mp_bitcnt_t => { return gmp._z_hamdist(p1, p2); },
    mpz_import: (p1: mpz_ptr, p2: c_size_t, p3: c_int, p4: c_size_t, p5: c_int, p6: c_size_t, p7: c_void_ptr): void => { gmp._z_import(p1, p2, p3, p4, p5, p6, p7); },
    mpz_init: (p1: mpz_ptr): void => { gmp._z_init(p1); },
    mpz_init2: (p1: mpz_ptr, p2: mp_bitcnt_t): void => { gmp._z_init2(p1, p2); },
    mpz_init_set: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_init_set(p1, p2); },
    mpz_init_set_d: (p1: mpz_ptr, p2: c_double): void => { gmp._z_init_set_d(p1, p2); },
    mpz_init_set_si: (p1: mpz_ptr, p2: c_signed_long_int): void => { gmp._z_init_set_si(p1, p2); },
    mpz_init_set_str: (p1: mpz_ptr, p2: c_str_ptr, p3: c_int): c_int => { return gmp._z_init_set_str(p1, p2, p3); },
    mpz_init_set_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_init_set_ui(p1, p2); },
    mpz_invert: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): c_int => { return gmp._z_invert(p1, p2, p3); },
    mpz_ior: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_ior(p1, p2, p3); },
    mpz_jacobi: (p1: mpz_srcptr, p2: mpz_srcptr): c_int => { return gmp._z_jacobi(p1, p2); },
    mpz_kronecker_si: (p1: mpz_srcptr, p2: c_signed_long_int): c_int => { return gmp._z_kronecker_si(p1, p2); },
    mpz_kronecker_ui: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_int => { return gmp._z_kronecker_ui(p1, p2); },
    mpz_si_kronecker: (p1: c_signed_long_int, p2: mpz_srcptr): c_int => { return gmp._z_si_kronecker(p1, p2); },
    mpz_ui_kronecker: (p1: c_unsigned_long_int, p2: mpz_srcptr): c_int => { return gmp._z_ui_kronecker(p1, p2); },
    mpz_lcm: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_lcm(p1, p2, p3); },
    mpz_lcm_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_lcm_ui(p1, p2, p3); },
    mpz_lucnum_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_lucnum_ui(p1, p2); },
    mpz_lucnum2_ui: (p1: mpz_ptr, p2: mpz_ptr, p3: c_unsigned_long_int): void => { gmp._z_lucnum2_ui(p1, p2, p3); },
    mpz_millerrabin: (p1: mpz_srcptr, p2: c_int): c_int => { return gmp._z_millerrabin(p1, p2); },
    mpz_mod: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_mod(p1, p2, p3); },
    mpz_mul: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_mul(p1, p2, p3); },
    mpz_mul_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_mul_2exp(p1, p2, p3); },
    mpz_mul_si: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_signed_long_int): void => { gmp._z_mul_si(p1, p2, p3); },
    mpz_mul_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_mul_ui(p1, p2, p3); },
    mpz_neg: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_neg(p1, p2); },
    mpz_nextprime: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_nextprime(p1, p2); },
    mpz_perfect_power_p: (p1: mpz_srcptr): c_int => { return gmp._z_perfect_power_p(p1); },
    mpz_perfect_square_p: (p1: mpz_srcptr): c_int => { return gmp._z_perfect_square_p(p1); },
    mpz_popcount: (p1: mpz_srcptr): mp_bitcnt_t => { return gmp._z_popcount(p1); },
    mpz_pow_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_pow_ui(p1, p2, p3); },
    mpz_powm: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr, p4: mpz_srcptr): void => { gmp._z_powm(p1, p2, p3, p4); },
    mpz_powm_sec: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr, p4: mpz_srcptr): void => { gmp._z_powm_sec(p1, p2, p3, p4); },
    mpz_powm_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int, p4: mpz_srcptr): void => { gmp._z_powm_ui(p1, p2, p3, p4); },
    mpz_probab_prime_p: (p1: mpz_srcptr, p2: c_int): c_int => { return gmp._z_probab_prime_p(p1, p2); },
    mpz_random: (p1: mpz_ptr, p2: mp_size_t): void => { gmp._z_random(p1, p2); },
    mpz_random2: (p1: mpz_ptr, p2: mp_size_t): void => { gmp._z_random2(p1, p2); },
    mpz_realloc2: (p1: mpz_ptr, p2: mp_bitcnt_t): void => { gmp._z_realloc2(p1, p2); },
    mpz_remove: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): mp_bitcnt_t => { return gmp._z_remove(p1, p2, p3); },
    mpz_root: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_int => { return gmp._z_root(p1, p2, p3); },
    mpz_rootrem: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: c_unsigned_long_int): void => { gmp._z_rootrem(p1, p2, p3, p4); },
    mpz_rrandomb: (p1: mpz_ptr, p2: gmp_randstate_t, p3: mp_bitcnt_t): void => { gmp._z_rrandomb(p1, p2, p3); },
    mpz_scan0: (p1: mpz_srcptr, p2: mp_bitcnt_t): mp_bitcnt_t => { return gmp._z_scan0(p1, p2); },
    mpz_scan1: (p1: mpz_srcptr, p2: mp_bitcnt_t): mp_bitcnt_t => { return gmp._z_scan1(p1, p2); },
    mpz_set: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_set(p1, p2); },
    mpz_set_d: (p1: mpz_ptr, p2: c_double): void => { gmp._z_set_d(p1, p2); },
    mpz_set_q: (p1: mpz_ptr, p2: mpq_srcptr): void => { gmp._z_set_q(p1, p2); },
    mpz_set_si: (p1: mpz_ptr, p2: c_signed_long_int): void => { gmp._z_set_si(p1, p2); },
    mpz_set_str: (p1: mpz_ptr, p2: c_str_ptr, p3: c_int): c_int => { return gmp._z_set_str(p1, p2, p3); },
    mpz_set_ui: (p1: mpz_ptr, p2: c_unsigned_long_int): void => { gmp._z_set_ui(p1, p2); },
    mpz_setbit: (p1: mpz_ptr, p2: mp_bitcnt_t): void => { gmp._z_setbit(p1, p2); },
    mpz_size: (p1: mpz_srcptr): c_size_t => { return gmp._z_size(p1); },
    mpz_sizeinbase: (p1: mpz_srcptr, p2: c_int): c_size_t => { return gmp._z_sizeinbase(p1, p2); },
    mpz_sqrt: (p1: mpz_ptr, p2: mpz_srcptr): void => { gmp._z_sqrt(p1, p2); },
    mpz_sqrtrem: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr): void => { gmp._z_sqrtrem(p1, p2, p3); },
    mpz_sub: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_sub(p1, p2, p3); },
    mpz_sub_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_sub_ui(p1, p2, p3); },
    mpz_ui_sub: (p1: mpz_ptr, p2: c_unsigned_long_int, p3: mpz_srcptr): void => { gmp._z_ui_sub(p1, p2, p3); },
    mpz_submul: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_submul(p1, p2, p3); },
    mpz_submul_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): void => { gmp._z_submul_ui(p1, p2, p3); },
    mpz_swap: (p1: mpz_ptr, p2: mpz_ptr): void => { gmp._z_swap(p1, p2); },
    mpz_tdiv_ui: (p1: mpz_srcptr, p2: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_tdiv_ui(p1, p2); },
    mpz_tdiv_q: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_tdiv_q(p1, p2, p3); },
    mpz_tdiv_q_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_tdiv_q_2exp(p1, p2, p3); },
    mpz_tdiv_q_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_tdiv_q_ui(p1, p2, p3); },
    mpz_tdiv_qr: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: mpz_srcptr): void => { gmp._z_tdiv_qr(p1, p2, p3, p4); },
    mpz_tdiv_qr_ui: (p1: mpz_ptr, p2: mpz_ptr, p3: mpz_srcptr, p4: c_unsigned_long_int): c_unsigned_long_int => {return gmp._z_tdiv_qr_ui(p1, p2, p3, p4); },
    mpz_tdiv_r: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_tdiv_r(p1, p2, p3); },
    mpz_tdiv_r_2exp: (p1: mpz_ptr, p2: mpz_srcptr, p3: mp_bitcnt_t): void => { gmp._z_tdiv_r_2exp(p1, p2, p3); },
    mpz_tdiv_r_ui: (p1: mpz_ptr, p2: mpz_srcptr, p3: c_unsigned_long_int): c_unsigned_long_int => { return gmp._z_tdiv_r_ui(p1, p2, p3); },
    mpz_tstbit: (p1: mpz_srcptr, p2: mp_bitcnt_t): c_int => { return gmp._z_tstbit(p1, p2); },
    mpz_ui_pow_ui: (p1: mpz_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int): void => { gmp._z_ui_pow_ui(p1, p2, p3); },
    mpz_urandomb: (p1: mpz_ptr, p2: gmp_randstate_t, p3: mp_bitcnt_t): void => { gmp._z_urandomb(p1, p2, p3); },
    mpz_urandomm: (p1: mpz_ptr, p2: gmp_randstate_t, p3: mpz_srcptr): void => { gmp._z_urandomm(p1, p2, p3); },
    mpz_xor: (p1: mpz_ptr, p2: mpz_srcptr, p3: mpz_srcptr): void => { gmp._z_xor(p1, p2, p3); },
    mpz_limbs_read: (p1: mpz_srcptr): mp_srcptr => { return gmp._z_limbs_read(p1); },
    mpz_limbs_write: (p1: mpz_ptr, p2: mp_size_t): mp_ptr => { return gmp._z_limbs_write(p1, p2); },
    mpz_limbs_modify: (p1: mpz_ptr, p2: mp_size_t): mp_ptr => { return gmp._z_limbs_modify(p1, p2); },
    mpz_limbs_finish: (p1: mpz_ptr, p2: mp_size_t): void => { gmp._z_limbs_finish(p1, p2); },
    mpz_roinit_n: (p1: mpz_ptr, p2: mp_srcptr, p3: mp_size_t): mpz_srcptr => { return gmp._z_roinit_n(p1, p2, p3); },
    
    /**************** Rational (i.e. Q) routines.  ****************/
    mpq_t: (): mpq_ptr => { return gmp._q_t(); },
    mpq_t_free: (p1: mpq_ptr ): void => { gmp._q_t_free(); },
    
    mpq_abs: (p1: mpq_ptr, p2: mpq_srcptr): void => { gmp._q_abs(p1, p2); },
    mpq_add: (p1: mpq_ptr, p2: mpq_srcptr, p3: mpq_srcptr): void => { gmp._q_add(p1, p2, p3); },
    mpq_canonicalize: (p1: mpq_ptr): void => { gmp._q_canonicalize(p1); },
    mpq_clear: (p1: mpq_ptr): void => { gmp._q_clear(p1); },
    mpq_cmp: (p1: mpq_srcptr, p2: mpq_srcptr): c_int => { return gmp._q_cmp(p1, p2); },
    mpq_cmp_si: (p1: mpq_srcptr, p2: c_signed_long_int, p3: c_unsigned_long_int): c_int => { return gmp._q_cmp_si(p1, p2, p3); },
    mpq_cmp_ui: (p1: mpq_srcptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int): c_int => { return gmp._q_cmp_ui(p1, p2, p3); },
    mpq_cmp_z: (p1: mpq_srcptr, p2: mpz_srcptr): c_int => { return gmp._q_cmp_z(p1, p2); },
    mpq_div: (p1: mpq_ptr, p2: mpq_srcptr, p3: mpq_srcptr): void => { gmp._q_div(p1, p2, p3); },
    mpq_div_2exp: (p1: mpq_ptr, p2: mpq_srcptr, p3: mp_bitcnt_t): void => { gmp._q_div_2exp(p1, p2, p3); },
    mpq_equal: (p1: mpq_srcptr, p2: mpq_srcptr): c_int => { return gmp._q_equal(p1, p2); },
    mpq_get_num: (p1: mpz_ptr, p2: mpq_srcptr): void => { gmp._q_get_num(p1, p2); },
    mpq_get_den: (p1: mpz_ptr, p2: mpq_srcptr): void => { gmp._q_get_den(p1, p2); },
    mpq_get_d: (p1: mpq_srcptr): c_double => { return gmp._q_get_d(p1); },
    mpq_get_str: (p1: c_str_ptr, p2: c_int, p3: mpq_srcptr): c_str_ptr => { return gmp._q_get_str(p1, p2, p3); },
    mpq_init: (p1: mpq_ptr): void => { gmp._q_init(p1); },
    mpq_inv: (p1: mpq_ptr, p2: mpq_srcptr): void => { gmp._q_inv(p1, p2); },
    mpq_mul: (p1: mpq_ptr, p2: mpq_srcptr, p3: mpq_srcptr): void => { gmp._q_mul(p1, p2, p3); },
    mpq_mul_2exp: (p1: mpq_ptr, p2: mpq_srcptr, p3: mp_bitcnt_t): void => { gmp._q_mul_2exp(p1, p2, p3); },
    mpq_neg: (p1: mpq_ptr, p2: mpq_srcptr): void => { gmp._q_neg(p1, p2); },
    mpq_set: (p1: mpq_ptr, p2: mpq_srcptr): void => { gmp._q_set(p1, p2); },
    mpq_set_d: (p1: mpq_ptr, p2: c_double): void => { gmp._q_set_d(p1, p2); },
    mpq_set_den: (p1: mpq_ptr, p2: mpz_srcptr): void => { gmp._q_set_den(p1, p2); },
    mpq_set_num: (p1: mpq_ptr, p2: mpz_srcptr): void => { gmp._q_set_num(p1, p2); },
    mpq_set_si: (p1: mpq_ptr, p2: c_signed_long_int, p3: c_unsigned_long_int): void => { gmp._q_set_si(p1, p2, p3); },
    mpq_set_str: (p1: mpq_ptr, p2: c_str_ptr, p3: c_int): c_int => { return gmp._q_set_str(p1, p2, p3); },
    mpq_set_ui: (p1: mpq_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int): void => { gmp._q_set_ui(p1, p2, p3); },
    mpq_set_z: (p1: mpq_ptr, p2: mpz_srcptr): void => { gmp._q_set_z(p1, p2); },
    mpq_sub: (p1: mpq_ptr, p2: mpq_srcptr, p3: mpq_srcptr): void => { gmp._q_sub(p1, p2, p3); },
    mpq_swap: (p1: mpq_ptr, p2: mpq_ptr): void => { gmp._q_swap(p1, p2); },
    
    
    /**************** MPFR  ****************/
    
    mpfr_t: (): mpfr_ptr => { return gmp._r_t(); },
    mpfr_t_free: (p1: mpfr_ptr): void => { gmp._r_t_free(p1); },
    
    mpfr_get_version: (): c_str_ptr => { return gmp._r_get_version(); },
    mpfr_get_patches: (): c_str_ptr => { return gmp._r_get_patches(); },
    mpfr_buildopt_tls_p: (): c_int => { return gmp._r_buildopt_tls_p(); },
    mpfr_buildopt_float128_p: (): c_int => { return gmp._r_buildopt_float128_p(); },
    mpfr_buildopt_decimal_p: (): c_int => { return gmp._r_buildopt_decimal_p(); },
    mpfr_buildopt_gmpinternals_p: (): c_int => { return gmp._r_buildopt_gmpinternals_p(); },
    mpfr_buildopt_sharedcache_p: (): c_int => { return gmp._r_buildopt_sharedcache_p(); },
    mpfr_buildopt_tune_case: (): c_str_ptr => { return gmp._r_buildopt_tune_case(); },
    mpfr_get_emin: (): mpfr_exp_t => { return gmp._r_get_emin(); },
    mpfr_set_emin: (p1: mpfr_exp_t): c_int => { return gmp._r_set_emin(p1); },
    mpfr_get_emin_min: (): mpfr_exp_t => { return gmp._r_get_emin_min(); },
    mpfr_get_emin_max: (): mpfr_exp_t => { return gmp._r_get_emin_max(); },
    mpfr_get_emax: (): mpfr_exp_t => { return gmp._r_get_emax(); },
    mpfr_set_emax: (p1: mpfr_exp_t) : c_int => { return gmp._r_set_emax(p1); },
    mpfr_get_emax_min: (): mpfr_exp_t => { return gmp._r_get_emax_min(); },
    mpfr_get_emax_max: (): mpfr_exp_t => { return gmp._r_get_emax_max(); },
    mpfr_set_default_rounding_mode: (p1: mpfr_rnd_t): void => { gmp._r_set_default_rounding_mode(p1); },
    mpfr_get_default_rounding_mode: (): mpfr_rnd_t => { return gmp._r_get_default_rounding_mode(); },
    mpfr_print_rnd_mode: (p1: mpfr_rnd_t): c_str_ptr => { return gmp._r_print_rnd_mode(p1); },
    mpfr_clear_flags: (): void => { gmp._r_clear_flags(); },
    mpfr_clear_underflow: (): void => { gmp._r_clear_underflow(); },
    mpfr_clear_overflow: (): void => { gmp._r_clear_overflow(); },
    mpfr_clear_divby0: (): void => { gmp._r_clear_divby0(); },
    mpfr_clear_nanflag: (): void => { gmp._r_clear_nanflag(); },
    mpfr_clear_inexflag: (): void => { gmp._r_clear_inexflag(); },
    mpfr_clear_erangeflag: (): void => { gmp._r_clear_erangeflag(); },
    mpfr_set_underflow: (): void => { gmp._r_set_underflow(); },
    mpfr_set_overflow: (): void => { gmp._r_set_overflow(); },
    mpfr_set_divby0: (): void => { gmp._r_set_divby0(); },
    mpfr_set_nanflag: (): void => { gmp._r_set_nanflag(); },
    mpfr_set_inexflag: (): void => { gmp._r_set_inexflag(); },
    mpfr_set_erangeflag: (): void => { gmp._r_set_erangeflag(); },
    mpfr_underflow_p: (): c_int => { return gmp._r_underflow_p(); },
    mpfr_overflow_p: (): c_int => { return gmp._r_overflow_p(); },
    mpfr_divby0_p: (): c_int => { return gmp._r_divby0_p(); },
    mpfr_nanflag_p: (): c_int => { return gmp._r_nanflag_p(); },
    mpfr_inexflag_p: (): c_int => { return gmp._r_inexflag_p(); },
    mpfr_erangeflag_p: (): c_int => { return gmp._r_erangeflag_p(); },
    mpfr_flags_clear: (p1: mpfr_flags_t): void => { gmp._r_flags_clear(p1); },
    mpfr_flags_set: (p1: mpfr_flags_t): void => { gmp._r_flags_set(p1); },
    mpfr_flags_test: (p1: mpfr_flags_t): mpfr_flags_t => { return gmp._r_flags_test(p1); },
    mpfr_flags_save: (): mpfr_flags_t => { return gmp._r_flags_save(); },
    mpfr_flags_restore: (p1: mpfr_flags_t, p2: mpfr_flags_t): void => { gmp._r_flags_restore(p1, p2); },
    mpfr_check_range: (p1: mpfr_ptr, p2: c_int, p3: mpfr_rnd_t): c_int => { return gmp._r_check_range(p1, p2, p3); },
    mpfr_init2: (p1: mpfr_ptr, p2: mpfr_prec_t): void => { gmp._r_init2(p1, p2); },
    mpfr_init: (p1: mpfr_ptr): void => { gmp._r_init(p1); },
    mpfr_clear: (p1: mpfr_ptr): void => { gmp._r_clear(p1); },
    mpfr_prec_round: (p1: mpfr_ptr, p2: mpfr_prec_t, p3: mpfr_rnd_t): c_int => { return gmp._r_prec_round(p1, p2, p3); },
    mpfr_can_round: (p1: mpfr_srcptr, p2: mpfr_exp_t, p3: mpfr_rnd_t, p4: mpfr_rnd_t, p5: mpfr_prec_t): c_int => { return gmp._r_can_round(p1, p2, p3, p4, p5); },
    mpfr_min_prec: (p1: mpfr_srcptr): mpfr_prec_t => { return gmp._r_min_prec(p1); },
    mpfr_get_exp: (p1: mpfr_srcptr): mpfr_exp_t => { return gmp._r_get_exp(p1); },
    mpfr_set_exp: (p1: mpfr_ptr, p2: mpfr_exp_t): c_int => { return gmp._r_set_exp(p1, p2); },
    mpfr_get_prec: (p1: mpfr_srcptr): mpfr_prec_t => { return gmp._r_get_prec(p1); },
    mpfr_set_prec: (p1: mpfr_ptr, p2: mpfr_prec_t): void => { gmp._r_set_prec(p1, p2); },
    mpfr_set_prec_raw: (p1: mpfr_ptr, p2: mpfr_prec_t): void => { gmp._r_set_prec_raw(p1, p2); },
    mpfr_set_default_prec: (p1: mpfr_prec_t): void => { gmp._r_set_default_prec(p1); },
    mpfr_get_default_prec: (): mpfr_prec_t => { return gmp._r_get_default_prec(); },
    mpfr_set_d: (p1: mpfr_ptr, p2: c_double, p3: mpfr_rnd_t): c_int => { return gmp._r_set_d(p1, p2, p3); },
    mpfr_set_z: (p1: mpfr_ptr, p2: mpz_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_set_z(p1, p2, p3); },
    mpfr_set_z_2exp: (p1: mpfr_ptr, p2: mpz_srcptr, p3: mpfr_exp_t, p4: mpfr_rnd_t): c_int => { return gmp._r_set_z_2exp(p1, p2, p3, p4); },
    mpfr_set_nan: (p1: mpfr_ptr): void => { gmp._r_set_nan(p1); },
    mpfr_set_inf: (p1: mpfr_ptr, p2: c_int): void => { gmp._r_set_inf(p1, p2); },
    mpfr_set_zero: (p1: mpfr_ptr, p2: c_int): void => { gmp._r_set_zero(p1, p2); },
    mpfr_set_si: (p1: mpfr_ptr, p2: c_signed_long_int, p3: mpfr_rnd_t): c_int => { return gmp._r_set_si(p1, p2, p3); },
    mpfr_set_ui: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_rnd_t): c_int => { return gmp._r_set_ui(p1, p2, p3); },
    mpfr_set_si_2exp: (p1: mpfr_ptr, p2: c_signed_long_int, p3: mpfr_exp_t, p4: mpfr_rnd_t): c_int => { return gmp._r_set_si_2exp(p1, p2, p3, p4); },
    mpfr_set_ui_2exp: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_exp_t, p4: mpfr_rnd_t): c_int => { return gmp._r_set_ui_2exp(p1, p2, p3, p4); },
    mpfr_set_q: (p1: mpfr_ptr, p2: mpq_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_set_q(p1, p2, p3); },
    mpfr_mul_q: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpq_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_q(p1, p2, p3, p4); },
    mpfr_div_q: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpq_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_div_q(p1, p2, p3, p4); },
    mpfr_add_q: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpq_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_add_q(p1, p2, p3, p4); },
    mpfr_sub_q: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpq_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_sub_q(p1, p2, p3, p4); },
    mpfr_cmp_q: (p1: mpfr_srcptr, p2: mpq_srcptr): c_int => { return gmp._r_cmp_q(p1, p2); },
    mpfr_get_q: (p1: mpq_ptr, p2: mpfr_srcptr): void => { return gmp._r_get_q(p1, p2); },
    mpfr_set_str: (p1: mpfr_ptr, p2: c_str_ptr, p3: c_int, p4: mpfr_rnd_t): c_int => { return gmp._r_set_str(p1, p2, p3, p4); },
    mpfr_init_set_str: (p1: mpfr_ptr, p2: c_str_ptr, p3: c_int, p4: mpfr_rnd_t): c_int => { return gmp._r_init_set_str(p1, p2, p3, p4); },
    mpfr_set4: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t, p4: c_int): c_int => { return gmp._r_set4(p1, p2, p3, p4); },
    mpfr_abs: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_abs(p1, p2, p3); },
    mpfr_set: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_set(p1, p2, p3); },
    mpfr_neg: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_neg(p1, p2, p3); },
    mpfr_signbit: (p1: mpfr_srcptr): c_int => { return gmp._r_signbit(p1); },
    mpfr_setsign: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_int, p4: mpfr_rnd_t): c_int => { return gmp._r_setsign(p1, p2, p3, p4); },
    mpfr_copysign: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_copysign(p1, p2, p3, p4); },
    mpfr_get_z_2exp: (p1: mpz_ptr, p2: mpfr_srcptr): mpfr_exp_t => { return gmp._r_get_z_2exp(p1, p2); },
    mpfr_get_d: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_double => { return gmp._r_get_d(p1, p2); },
    mpfr_get_d1: (p1: mpfr_srcptr): c_double => { return gmp._r_get_d1(p1); },
    mpfr_get_d_2exp: (p1: c_long_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_double => { return gmp._r_get_d_2exp(p1, p2, p3); },
    mpfr_frexp: (p1: mpfr_exp_t_ptr, p2: mpfr_ptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_frexp(p1, p2, p3, p4); },
    mpfr_get_si: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_signed_long_int => { return gmp._r_get_si(p1, p2); },
    mpfr_get_ui: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_unsigned_long_int => { return gmp._r_get_ui(p1, p2); },
    mpfr_get_str_ndigits: (p1: c_int, p2: mpfr_prec_t): c_size_t => { return gmp._r_get_str_ndigits(p1, p2); },
    mpfr_get_str: (p1: c_str_ptr, p2: mpfr_exp_t_ptr, p3: c_int, p4: c_size_t, p5: mpfr_srcptr, p6: mpfr_rnd_t): c_str_ptr => { return gmp._r_get_str(p1, p2, p3, p4, p5, p6); },
    mpfr_get_z: (p1: mpz_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_get_z(p1, p2, p3); },
    mpfr_free_str: (p1: c_str_ptr): void => { gmp._r_free_str(p1); },
    mpfr_urandom: (p1: mpfr_ptr, p2: gmp_randstate_t, p3: mpfr_rnd_t): c_int => { return gmp._r_urandom(p1, p2, p3); },
    mpfr_nrandom: (p1: mpfr_ptr, p2: gmp_randstate_t, p3: mpfr_rnd_t): c_int => { return gmp._r_nrandom(p1, p2, p3); },
    mpfr_erandom: (p1: mpfr_ptr, p2: gmp_randstate_t, p3: mpfr_rnd_t): c_int => { return gmp._r_erandom(p1, p2, p3); },
    mpfr_urandomb: (p1: mpfr_ptr, p2: gmp_randstate_t): c_int => { return gmp._r_urandomb(p1, p2); },
    
    mpfr_nextabove: (p1: mpfr_ptr): void => { gmp._r_nextabove(p1); },
    mpfr_nextbelow: (p1: mpfr_ptr): void => { gmp._r_nextbelow(p1); },
    mpfr_nexttoward: (p1: mpfr_ptr, p2: mpfr_srcptr): void => { gmp._r_nexttoward(p1, p2); },
    
    mpfr_pow: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_pow(p1, p2, p3, p4); },
    mpfr_pow_si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_pow_si(p1, p2, p3, p4); },
    mpfr_pow_ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_pow_ui(p1, p2, p3, p4); },
    mpfr_ui_pow_ui: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_ui_pow_ui(p1, p2, p3, p4); },
    mpfr_ui_pow: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_ui_pow(p1, p2, p3, p4); },
    mpfr_pow_z: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpz_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_pow_z(p1, p2, p3, p4); },
    mpfr_sqrt: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_sqrt(p1, p2, p3); },
    mpfr_sqrt_ui: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_rnd_t): c_int => { return gmp._r_sqrt_ui(p1, p2, p3); },
    mpfr_rec_sqrt: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rec_sqrt(p1, p2, p3); },
    mpfr_add: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_add(p1, p2, p3, p4); },
    mpfr_sub: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_sub(p1, p2, p3, p4); },
    mpfr_mul: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_mul(p1, p2, p3, p4); },
    mpfr_div: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_div(p1, p2, p3, p4); },
    mpfr_add_ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_add_ui(p1, p2, p3, p4); },
    mpfr_sub_ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_sub_ui(p1, p2, p3, p4); },
    mpfr_ui_sub: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_ui_sub(p1, p2, p3, p4); },
    mpfr_mul_ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_ui(p1, p2, p3, p4); },
    mpfr_div_ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_div_ui(p1, p2, p3, p4); },
    mpfr_ui_div: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_ui_div(p1, p2, p3, p4); },
    mpfr_add_si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_add_si(p1, p2, p3, p4); },
    mpfr_sub_si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_sub_si(p1, p2, p3, p4); },
    mpfr_si_sub: (p1: mpfr_ptr, p2: c_signed_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_si_sub(p1, p2, p3, p4); },
    mpfr_mul_si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_si(p1, p2, p3, p4); },
    mpfr_div_si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_div_si(p1, p2, p3, p4); },
    mpfr_si_div: (p1: mpfr_ptr, p2: c_signed_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_si_div(p1, p2, p3, p4); },
    mpfr_add_d: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_double, p4: mpfr_rnd_t): c_int => { return gmp._r_add_d(p1, p2, p3, p4); },
    mpfr_sub_d: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_double, p4: mpfr_rnd_t): c_int => { return gmp._r_sub_d(p1, p2, p3, p4); },
    mpfr_d_sub: (p1: mpfr_ptr, p2: c_double, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_d_sub(p1, p2, p3, p4); },
    mpfr_mul_d: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_double, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_d(p1, p2, p3, p4); },
    mpfr_div_d: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_double, p4: mpfr_rnd_t): c_int => { return gmp._r_div_d(p1, p2, p3, p4); },
    mpfr_d_div: (p1: mpfr_ptr, p2: c_double, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_d_div(p1, p2, p3, p4); },
    mpfr_sqr: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_sqr(p1, p2, p3); },
    
    mpfr_const_pi: (p1: mpfr_ptr, p2: mpfr_rnd_t): c_int => { return gmp._r_const_pi(p1, p2); },
    mpfr_const_log2: (p1: mpfr_ptr, p2: mpfr_rnd_t): c_int => { return gmp._r_const_log2(p1, p2); },
    mpfr_const_euler: (p1: mpfr_ptr, p2: mpfr_rnd_t): c_int => { return gmp._r_const_euler(p1, p2); },
    mpfr_const_catalan: (p1: mpfr_ptr, p2: mpfr_rnd_t): c_int => { return gmp._r_const_catalan(p1, p2); },
    mpfr_agm: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_agm(p1, p2, p3, p4); },
    mpfr_log: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_log(p1, p2, p3); },
    mpfr_log2: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_log2(p1, p2, p3); },
    mpfr_log10: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_log10(p1, p2, p3); },
    mpfr_log1p: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_log1p(p1, p2, p3); },
    mpfr_log_ui: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_rnd_t): c_int => { return gmp._r_log_ui(p1, p2, p3); },
    mpfr_exp: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_exp(p1, p2, p3); },
    mpfr_exp2: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_exp2(p1, p2, p3); },
    mpfr_exp10: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_exp10(p1, p2, p3); },
    mpfr_expm1: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_expm1(p1, p2, p3); },
    mpfr_eint: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_eint(p1, p2, p3); },
    mpfr_li2: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_li2(p1, p2, p3); },
    mpfr_cmp:  (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_cmp(p1, p2); },
    mpfr_cmp3: (p1: mpfr_srcptr, p2: mpfr_srcptr, p3: c_int): c_int => { return gmp._r_cmp3(p1, p2, p3); },
    mpfr_cmp_d: (p1: mpfr_srcptr, p2: c_double): c_int => { return gmp._r_cmp_d(p1, p2); },
    mpfr_cmp_ui: (p1: mpfr_srcptr, p2: c_unsigned_long_int): c_int => { return gmp._r_cmp_ui(p1, p2); },
    mpfr_cmp_si: (p1: mpfr_srcptr, p2: c_signed_long_int): c_int => { return gmp._r_cmp_si(p1, p2); },
    mpfr_cmp_ui_2exp: (p1: mpfr_srcptr, p2: c_unsigned_long_int, p3: mpfr_exp_t): c_int => { return gmp._r_cmp_ui_2exp(p1, p2, p3); },
    mpfr_cmp_si_2exp: (p1: mpfr_srcptr, p2: c_signed_long_int, p3: mpfr_exp_t): c_int => { return gmp._r_cmp_si_2exp(p1, p2, p3); },
    mpfr_cmpabs: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_cmpabs(p1, p2); },
    mpfr_cmpabs_ui: (p1: mpfr_srcptr, p2: c_unsigned_long_int): c_int => { return gmp._r_cmpabs_ui(p1, p2); },
    mpfr_reldiff: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): void => { gmp._r_reldiff(p1, p2, p3, p4); },
    mpfr_eq: (p1: mpfr_srcptr, p2: mpfr_srcptr, p3: c_unsigned_long_int): c_int => { return gmp._r_eq(p1, p2, p3); },
    mpfr_sgn: (p1: mpfr_srcptr): c_int => { return gmp._r_sgn(p1); },
    
    mpfr_mul_2exp: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_2exp(p1, p2, p3, p4); },
    mpfr_div_2exp: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_div_2exp(p1, p2, p3, p4); },
    mpfr_mul_2ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_2ui(p1, p2, p3, p4); },
    mpfr_div_2ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_div_2ui(p1, p2, p3, p4); },
    mpfr_mul_2si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_2si(p1, p2, p3, p4); },
    mpfr_div_2si: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_signed_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_div_2si(p1, p2, p3, p4); },
    
    mpfr_rint: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rint(p1, p2, p3); },
    mpfr_roundeven: (p1: mpfr_ptr, p2: mpfr_srcptr): c_int => { return gmp._r_roundeven(p1, p2); },
    mpfr_round: (p1: mpfr_ptr, p2: mpfr_srcptr): c_int => { return gmp._r_round(p1, p2); },
    mpfr_trunc: (p1: mpfr_ptr, p2: mpfr_srcptr): c_int => { return gmp._r_trunc(p1, p2); },
    mpfr_ceil: (p1: mpfr_ptr, p2: mpfr_srcptr): c_int => { return gmp._r_ceil(p1, p2); },
    mpfr_floor: (p1: mpfr_ptr, p2: mpfr_srcptr): c_int => { return gmp._r_floor(p1, p2); },
    mpfr_rint_roundeven: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rint_roundeven(p1, p2, p3); },
    mpfr_rint_round: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rint_round(p1, p2, p3); },
    mpfr_rint_trunc: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rint_trunc(p1, p2, p3); },
    mpfr_rint_ceil: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rint_ceil(p1, p2, p3); },
    mpfr_rint_floor: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_rint_floor(p1, p2, p3); },
    mpfr_frac: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_frac(p1, p2, p3); },
    mpfr_modf: (p1: mpfr_ptr, p2: mpfr_ptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_modf(p1, p2, p3, p4); },
    mpfr_remquo: (p1: mpfr_ptr, p2: c_long_ptr, p3: mpfr_srcptr, p4: mpfr_srcptr, p5: mpfr_rnd_t): c_int => { return gmp._r_remquo(p1, p2, p3, p4, p5); },
    mpfr_remainder: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_remainder(p1, p2, p3, p4); },
    mpfr_fmod: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_fmod(p1, p2, p3, p4); },
    mpfr_fmodquo: (p1: mpfr_ptr, p2: c_long_ptr, p3: mpfr_srcptr, p4: mpfr_srcptr, p5: mpfr_rnd_t): c_int => { return gmp._r_fmodquo(p1, p2, p3, p4, p5); },
    
    mpfr_fits_ulong_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_ulong_p(p1, p2); },
    mpfr_fits_slong_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_slong_p(p1, p2); },
    mpfr_fits_uint_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_uint_p(p1, p2); },
    mpfr_fits_sint_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_sint_p(p1, p2); },
    mpfr_fits_ushort_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_ushort_p(p1, p2); },
    mpfr_fits_sshort_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_sshort_p(p1, p2); },
    mpfr_fits_uintmax_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_uintmax_p(p1, p2); },
    mpfr_fits_intmax_p: (p1: mpfr_srcptr, p2: mpfr_rnd_t): c_int => { return gmp._r_fits_intmax_p(p1, p2); },
    mpfr_extract: (p1: mpz_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int): void => { gmp._r_extract(p1, p2, p3); },
    mpfr_swap: (p1: mpfr_ptr, p2: mpfr_ptr): void => { gmp._r_swap(p1, p2); },
    mpfr_dump: (p1: mpfr_srcptr): void => { gmp._r_dump(p1); },
    mpfr_nan_p: (p1: mpfr_srcptr): c_int => { return gmp._r_nan_p(p1); },
    mpfr_inf_p: (p1: mpfr_srcptr): c_int => { return gmp._r_inf_p(p1); },
    mpfr_number_p: (p1: mpfr_srcptr): c_int => { return gmp._r_number_p(p1); },
    mpfr_integer_p: (p1: mpfr_srcptr): c_int => { return gmp._r_integer_p(p1); },
    mpfr_zero_p: (p1: mpfr_srcptr): c_int => { return gmp._r_zero_p(p1); },
    mpfr_regular_p: (p1: mpfr_srcptr): c_int => { return gmp._r_regular_p(p1); },
    mpfr_greater_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_greater_p(p1, p2); },
    mpfr_greaterequal_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_greaterequal_p(p1, p2); },
    mpfr_less_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_less_p(p1, p2); },
    mpfr_lessequal_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_lessequal_p(p1, p2); },
    mpfr_lessgreater_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_lessgreater_p(p1, p2); },
    mpfr_equal_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_equal_p(p1, p2); },
    mpfr_unordered_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_unordered_p(p1, p2); },
    mpfr_atanh: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_atanh(p1, p2, p3); },
    mpfr_acosh: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_acosh(p1, p2, p3); },
    mpfr_asinh: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_asinh(p1, p2, p3); },
    mpfr_cosh: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_cosh(p1, p2, p3); },
    mpfr_sinh: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_sinh(p1, p2, p3); },
    mpfr_tanh: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_tanh(p1, p2, p3); },
    mpfr_sinh_cosh: (p1: mpfr_ptr, p2: mpfr_ptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_sinh_cosh(p1, p2, p3, p4); },
    
    mpfr_sech: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_sech(p1, p2, p3); },
    mpfr_csch: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_csch(p1, p2, p3); },
    mpfr_coth: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_coth(p1, p2, p3); },
    mpfr_acos: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_acos(p1, p2, p3); },
    mpfr_asin: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_asin(p1, p2, p3); },
    mpfr_atan: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_atan(p1, p2, p3); },
    mpfr_sin: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_sin(p1, p2, p3); },
    mpfr_sin_cos: (p1: mpfr_ptr, p2: mpfr_ptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_sin_cos(p1, p2, p3, p4); },
    mpfr_cos: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_cos(p1, p2, p3); },
    mpfr_tan: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_tan(p1, p2, p3); },
    mpfr_atan2: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_atan2(p1, p2, p3, p4); },
    mpfr_sec: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_sec(p1, p2, p3); },
    mpfr_csc: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_csc(p1, p2, p3); },
    mpfr_cot: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_cot(p1, p2, p3); },
    mpfr_hypot: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_hypot(p1, p2, p3, p4); },
    mpfr_erf: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_erf(p1, p2, p3); },
    mpfr_erfc: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_erfc(p1, p2, p3); },
    mpfr_cbrt: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_cbrt(p1, p2, p3); },
    mpfr_rootn_ui: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_rootn_ui(p1, p2, p3, p4); },
    mpfr_gamma: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_gamma(p1, p2, p3); },
    mpfr_gamma_inc: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_gamma_inc(p1, p2, p3, p4); },
    mpfr_beta: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_beta(p1, p2, p3, p4); },
    mpfr_lngamma: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_lngamma(p1, p2, p3); },
    mpfr_lgamma: (p1: mpfr_ptr, p2: c_int_ptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_lgamma(p1, p2, p3, p4); },
    mpfr_digamma: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_digamma(p1, p2, p3); },
    mpfr_zeta: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_zeta(p1, p2, p3); },
    mpfr_zeta_ui: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_rnd_t): c_int => { return gmp._r_zeta_ui(p1, p2, p3); },
    mpfr_fac_ui: (p1: mpfr_ptr, p2: c_unsigned_long_int, p3: mpfr_rnd_t): c_int => { return gmp._r_fac_ui(p1, p2, p3); },
    mpfr_j0: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_j0(p1, p2, p3); },
    mpfr_j1: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_j1(p1, p2, p3); },
    mpfr_jn: (p1: mpfr_ptr, p2: c_signed_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_jn(p1, p2, p3, p4); },
    mpfr_y0: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_y0(p1, p2, p3); },
    mpfr_y1: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_y1(p1, p2, p3); },
    mpfr_yn: (p1: mpfr_ptr, p2: c_signed_long_int, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_yn(p1, p2, p3, p4); },

    mpfr_ai: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._r_ai(p1, p2, p3); },
    mpfr_min: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_min(p1, p2, p3, p4); },
    mpfr_max: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_max(p1, p2, p3, p4); },
    mpfr_dim: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_dim(p1, p2, p3, p4); },
    mpfr_mul_z: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpz_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_mul_z(p1, p2, p3, p4); },
    mpfr_div_z: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpz_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_div_z(p1, p2, p3, p4); },
    mpfr_add_z: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpz_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_add_z(p1, p2, p3, p4); },
    mpfr_sub_z: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpz_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_sub_z(p1, p2, p3, p4); },
    mpfr_z_sub: (p1: mpfr_ptr, p2: mpz_srcptr, p3: mpfr_srcptr, p4: mpfr_rnd_t): c_int => { return gmp._r_z_sub(p1, p2, p3, p4); },
    mpfr_cmp_z: (p1: mpfr_srcptr, p2: mpz_srcptr): c_int => { return gmp._r_cmp_z(p1, p2); },
    mpfr_fma: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_srcptr,  p5: mpfr_rnd_t): c_int => { return gmp._r_fma(p1, p2, p3, p4, p5); },
    mpfr_fms: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_srcptr, p5: mpfr_rnd_t): c_int => { return gmp._r_fms(p1, p2, p3, p4, p5); },
    mpfr_fmma: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_srcptr, p5: mpfr_srcptr, p6: mpfr_rnd_t): c_int => { return gmp._r_fmma(p1, p2, p3, p4, p5, p6); },
    mpfr_fmms: (p1: mpfr_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpfr_srcptr, p5: mpfr_srcptr, p6: mpfr_rnd_t): c_int => { return gmp._r_fmms(p1, p2, p3, p4, p5, p6); },
    mpfr_sum: (p1: mpfr_ptr, p2: mpfr_ptr_ptr, p3: c_unsigned_long_int, p4: mpfr_rnd_t): c_int => { return gmp._r_sum(p1, p2, p3, p4); },
    mpfr_dot: (p1: mpfr_ptr, p2: mpfr_ptr_ptr, p3: mpfr_ptr_ptr, p4: c_unsigned_long_int, p5: mpfr_rnd_t): c_int => { return gmp._r_dot(p1, p2, p3, p4, p5); },
    
    mpfr_free_cache: (): void => { gmp._r_free_cache(); },
    mpfr_free_cache2: (p1: mpfr_free_cache_t): void => { gmp._r_free_cache2(p1); },
    mpfr_free_pool: (): void => { gmp._r_free_pool(); },
    mpfr_mp_memory_cleanup: (): c_int => { return gmp._r_mp_memory_cleanup(); },
    mpfr_subnormalize: (p1: mpfr_ptr, p2: c_int, p3: mpfr_rnd_t): c_int => { return gmp._r_subnormalize(p1, p2, p3); },
    mpfr_strtofr: (p1: mpfr_ptr, p2: c_str_ptr, p3: c_str_ptr_ptr, p4: c_int, p5: mpfr_rnd_t): c_int => { return gmp._r_strtofr(p1, p2, p3, p4, p5); },
    mpfr_round_nearest_away_begin: (p1: mpfr_t): void => { gmp._r_round_nearest_away_begin(p1); },
    mpfr_round_nearest_away_end: (p1: mpfr_t, p2: c_int): c_int => { return gmp._r_round_nearest_away_end(p1, p2); },
    mpfr_custom_get_size: (p1: mpfr_prec_t): c_size_t => { return gmp._r_custom_get_size(p1); },
    mpfr_custom_init: (p1: c_void_ptr, p2: mpfr_prec_t): void => { gmp._r_custom_init(p1, p2); },
    mpfr_custom_get_significand: (p1: mpfr_srcptr): c_void_ptr => { return gmp._r_custom_get_significand(p1); },
    mpfr_custom_get_exp: (p1: mpfr_srcptr): mpfr_exp_t => { return gmp._r_custom_get_exp(p1); },
    mpfr_custom_move: (p1: mpfr_ptr, p2: c_void_ptr): void => { gmp._r_custom_move(p1, p2); },
    mpfr_custom_init_set: (p1: mpfr_ptr, p2: c_int, p3: mpfr_exp_t, p4: mpfr_prec_t, p5: c_void_ptr): void => { gmp._r_custom_init_set(p1, p2, p3, p4, p5); },
    mpfr_custom_get_kind: (p1: mpfr_srcptr): c_int => { return gmp._r_custom_get_kind(p1); },
    mpfr_total_order_p: (p1: mpfr_srcptr, p2: mpfr_srcptr): c_int => { return gmp._r_total_order_p(p1, p2); },
    
    /**************** MPC  ****************/
    
    mpc_t: (): mpc_ptr => { return gmp._c_t(); },
    mpc_t_free: (p1: mpc_ptr): void => { gmp._c_t_free(p1); },
    
    mpc_add: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_add(p1, p2, p3, p4); },
    mpc_add_fr: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpfr_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_add_fr(p1, p2, p3, p4); },
    mpc_add_si: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_signed_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_add_si(p1, p2, p3, p4); },
    mpc_add_ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_add_ui(p1, p2, p3, p4); },
    mpc_sub: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_sub(p1, p2, p3, p4); },
    mpc_sub_fr: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpfr_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_sub_fr(p1, p2, p3, p4); },
    mpc_fr_sub: (p1: mpc_ptr, p2: mpfr_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_fr_sub(p1, p2, p3, p4); },
    mpc_sub_ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_sub_ui(p1, p2, p3, p4); },
    mpc_ui_ui_sub: (p1: mpc_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int, p4: mpc_srcptr, p5: mpc_rnd_t): c_int => { return gmp._c_ui_ui_sub(p1, p2, p3, p4, p5); },
    mpc_mul: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_mul(p1, p2, p3, p4); },
    mpc_mul_fr: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpfr_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_mul_fr(p1, p2, p3, p4); },
    mpc_mul_ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_mul_ui(p1, p2, p3, p4); },
    mpc_mul_si: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_signed_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_mul_si(p1, p2, p3, p4); },
    mpc_mul_i: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_int, p4: mpc_rnd_t): c_int => { return gmp._c_mul_i(p1, p2, p3, p4); },
    mpc_sqr: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_sqr(p1, p2, p3); },
    mpc_div: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_div(p1, p2, p3, p4); },
    mpc_pow: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_pow(p1, p2, p3, p4); },
    mpc_pow_fr: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpfr_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_pow_fr(p1, p2, p3, p4); },
    mpc_pow_d: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_double, p4: mpc_rnd_t): c_int => { return gmp._c_pow_d(p1, p2, p3, p4); },
    mpc_pow_si: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_signed_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_pow_si(p1, p2, p3, p4); },
    mpc_pow_ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_pow_ui(p1, p2, p3, p4); },
    mpc_pow_z: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpz_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_pow_z(p1, p2, p3, p4); },
    mpc_div_fr: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpfr_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_div_fr(p1, p2, p3, p4); },
    mpc_fr_div: (p1: mpc_ptr, p2: mpfr_srcptr, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_fr_div(p1, p2, p3, p4); },
    mpc_div_ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_div_ui(p1, p2, p3, p4); },
    mpc_ui_div: (p1: mpc_ptr, p2: c_unsigned_long_int, p3: mpc_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_ui_div(p1, p2, p3, p4); },
    mpc_div_2ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_div_2ui(p1, p2, p3, p4); },
    mpc_mul_2ui: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_mul_2ui(p1, p2, p3, p4); },
    mpc_div_2si: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_signed_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_div_2si(p1, p2, p3, p4); },
    mpc_mul_2si: (p1: mpc_ptr, p2: mpc_srcptr, p3: c_signed_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_mul_2si(p1, p2, p3, p4); },
    mpc_conj: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_conj(p1, p2, p3); },
    mpc_neg: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_neg(p1, p2, p3); },
    mpc_sum: (p1: mpc_ptr, p2: mpc_ptr_ptr, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_sum(p1, p2, p3, p4); },
    mpc_dot: (p1: mpc_ptr, p2: mpc_ptr_ptr, p3: mpc_ptr_ptr, p4: c_unsigned_long_int, p5: mpc_rnd_t): c_int => { return gmp._c_dot(p1, p2, p3, p4, p5); },
    mpc_norm: (p1: mpfr_ptr, p2: mpc_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._c_norm(p1, p2, p3); },
    mpc_abs: (p1: mpfr_ptr, p2: mpc_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._c_abs(p1, p2, p3); },
    mpc_sqrt: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_sqrt(p1, p2, p3); },
    mpc_set: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_set(p1, p2, p3); },
    mpc_set_d: (p1: mpc_ptr, p2: c_double, p3: mpc_rnd_t): c_int => { return gmp._c_set_d(p1, p2, p3); },
    mpc_set_d_d: (p1: mpc_ptr, p2: c_double, p3: c_double, p4: mpc_rnd_t): c_int => { return gmp._c_set_d_d(p1, p2, p3, p4); },
    mpc_set_fr: (p1: mpc_ptr, p2: mpfr_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_set_fr(p1, p2, p3); },
    mpc_set_fr_fr: (p1: mpc_ptr, p2: mpfr_srcptr, p3: mpfr_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_set_fr_fr(p1, p2, p3, p4); },
    mpc_set_q: (p1: mpc_ptr, p2: mpq_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_set_q(p1, p2, p3); },
    mpc_set_q_q: (p1: mpc_ptr, p2: mpq_srcptr, p3: mpq_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_set_q_q(p1, p2, p3, p4); },
    mpc_set_si: (p1: mpc_ptr, p2: c_signed_long_int, p3: mpc_rnd_t): c_int => { return gmp._c_set_si(p1, p2, p3); },
    mpc_set_si_si: (p1: mpc_ptr, p2: c_signed_long_int, p3: c_signed_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_set_si_si(p1, p2, p3, p4); },
    mpc_set_ui: (p1: mpc_ptr, p2: c_unsigned_long_int, p3: mpc_rnd_t): c_int => { return gmp._c_set_ui(p1, p2, p3); },
    mpc_set_ui_ui: (p1: mpc_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_set_ui_ui(p1, p2, p3, p4); },
    mpc_set_z: (p1: mpc_ptr, p2: mpz_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_set_z(p1, p2, p3); },
    mpc_set_z_z: (p1: mpc_ptr, p2: mpz_srcptr, p3: mpz_srcptr, p4: mpc_rnd_t): c_int => { return gmp._c_set_z_z(p1, p2, p3, p4); },
    mpc_swap: (p1: mpc_ptr, p2: mpc_ptr): void => { gmp._c_swap(p1, p2); },
    mpc_fma: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_srcptr, p4: mpc_srcptr, p5: mpc_rnd_t): c_int => { return gmp._c_fma(p1, p2, p3, p4, p5); },
    
    mpc_set_nan: (p1: mpc_ptr): void => { gmp._c_set_nan(p1); },
    
    mpc_real: (p1: mpfr_ptr, p2: mpc_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._c_real(p1, p2, p3); },
    mpc_imag: (p1: mpfr_ptr, p2: mpc_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._c_imag(p1, p2, p3); },
    mpc_arg: (p1: mpfr_ptr, p2: mpc_srcptr, p3: mpfr_rnd_t): c_int => { return gmp._c_arg(p1, p2, p3); },
    mpc_proj: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_proj(p1, p2, p3); },
    mpc_cmp: (p1: mpc_srcptr, p2: mpc_srcptr): c_int => { return gmp._c_cmp(p1, p2); },
    mpc_cmp_si_si: (p1: mpc_srcptr, p2: c_signed_long_int, p3: c_signed_long_int): c_int => { return gmp._c_cmp_si_si(p1, p2, p3); },
    mpc_cmp_abs: (p1: mpc_srcptr, p2: mpc_srcptr): c_int => { return gmp._c_cmp_abs(p1, p2); },
    mpc_exp: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_exp(p1, p2, p3); },
    mpc_log: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_log(p1, p2, p3); },
    mpc_log10: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_log10(p1, p2, p3); },
    mpc_sin: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_sin(p1, p2, p3); },
    mpc_cos: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_cos(p1, p2, p3); },
    mpc_sin_cos: (p1: mpc_ptr, p2: mpc_ptr, p3: mpc_srcptr, p4: mpc_rnd_t, p5: mpc_rnd_t): c_int => { return gmp._c_sin_cos(p1, p2, p3, p4, p5); },
    mpc_tan: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_tan(p1, p2, p3); },
    mpc_sinh: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_sinh(p1, p2, p3); },
    mpc_cosh: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_cosh(p1, p2, p3); },
    mpc_tanh: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_tanh(p1, p2, p3); },
    mpc_asin: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_asin(p1, p2, p3); },
    mpc_acos: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_acos(p1, p2, p3); },
    mpc_atan: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_atan(p1, p2, p3); },
    mpc_asinh: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_asinh(p1, p2, p3); },
    mpc_acosh: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_acosh(p1, p2, p3); },
    mpc_atanh: (p1: mpc_ptr, p2: mpc_srcptr, p3: mpc_rnd_t): c_int => { return gmp._c_atanh(p1, p2, p3); },
    mpc_rootofunity: (p1: mpc_ptr, p2: c_unsigned_long_int, p3: c_unsigned_long_int, p4: mpc_rnd_t): c_int => { return gmp._c_rootofunity(p1, p2, p3, p4); },
    mpc_clear: (p1: mpc_ptr): void => { gmp._c_clear(p1); },
    mpc_urandom: (p1: mpc_ptr, p2: gmp_randstate_t): c_int => { return gmp._c_urandom(p1, p2); },
    mpc_init2: (p1: mpc_ptr, p2: mpfr_prec_t): void => { gmp._c_init2(p1, p2); },
    mpc_init3: (p1: mpc_ptr, p2: mpfr_prec_t, p3: mpfr_prec_t): void => { gmp._c_init3(p1, p2, p3); },
    mpc_get_prec: (p1: mpc_srcptr): mpfr_prec_t => { return gmp._c_get_prec(p1); },
    mpc_get_prec2: (p1: mpfr_prec_t_ptr, p2: mpfr_prec_t_ptr, p3: mpc_srcptr): void => { gmp._c_get_prec2(p1, p2, p3); },
    mpc_set_prec: (p1: mpc_ptr, p2: mpfr_prec_t): void => { gmp._c_set_prec(p1, p2); },
    mpc_get_version: (): c_str_ptr => { return gmp._c_get_version(); },
    
    mpc_strtoc: (p1: mpc_ptr, p2: c_str_ptr, p3: c_str_ptr_ptr, p4: c_int, p5: mpc_rnd_t): c_int => { return gmp._c_strtoc(p1, p2, p3, p4, p5); },
    mpc_set_str: (p1: mpc_ptr, p2: c_str_ptr, p3: c_int, p4: mpc_rnd_t): c_int => { return gmp._c_set_str(p1, p2, p3, p4); },
    mpc_get_str: (p1: c_int, p2: c_size_t, p3: mpc_srcptr, p4: mpc_rnd_t): c_str_ptr => { return gmp._c_get_str(p1, p2, p3, p4); },
    mpc_free_str: (p1: c_str_ptr): void => { return gmp._c_free_str(p1); },
  };
};

